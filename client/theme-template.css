/*
==============================================
CycleSense Theme Template
==============================================

How to add a new theme:
1. Copy the .theme-TEMPLATE_NAME block below.
2. Paste it into your main CSS (index.css) or a new CSS file.
3. Rename .theme-TEMPLATE_NAME to your theme's name, e.g. .theme-neon or .theme-moonlite
4. Adjust the color variables to fit your theme.
5. If you want GLOW EFFECTS (neon, synth, etc):
   - Add a --glow-color variable to your theme (see example below).
   - Optionally add a --glow variable for more custom glow (see below).
   - Use the same selector pattern as in index.css (e.g. .theme-yourtheme .glow-btn { ... })
   - For symptom buttons: add a selector like .theme-yourtheme .symptom-btn.selected:hover { box-shadow: ... }
   - Only themes with --glow-color and the proper CSS will show glow!
   - Glow is fully themeable and can be extended to any element (see below).
6. If you do NOT want glow, simply do not add --glow-color or glow utility classes for your theme.
7. Save and reload your app to see the new theme in action.

----------------------------------------------
EXAMPLE: Theme with Glow (copy and edit)
----------------------------------------------
.theme-myneon {
  --background: 250 80% 10%;
  --foreground: 0 0% 98%;
  --primary: 200 100% 60%;
  /* ...other variables... */
  --glow-color: #00fff7; /* <- enables glow for this theme */
  --glow: 0 0 8px #00fff7, 0 0 16px #0099ff; /* optional: custom multi-color glow */
}
.theme-myneon .glow-btn,
.theme-myneon .glow-switch {
  box-shadow: 0 0 8px 2px var(--glow-color), 0 0 16px 4px var(--glow-color);
}
.theme-myneon .symptom-btn.selected:hover {
  box-shadow: 0 0 4px hsl(var(--accent)), 0 0 8px hsl(var(--accent) / 0.6);
  transform: translateY(-1px);
  transition: box-shadow 0.3s, transform 0.2s;
}

----------------------------------------------
GLOW THEME CHECKLIST
----------------------------------------------
- [ ] Add --glow-color and (optionally) --glow to your theme root.
- [ ] Add .theme-yourtheme .glow-btn, .glow-switch, etc. for glowing buttons.
- [ ] Add .theme-yourtheme .symptom-btn.selected:hover for glowing symptom buttons.
- [ ] Avoid using transparency in backgrounds unless you want layering effects.
- [ ] If using Tailwind utility classes, override them with !important or theme selectors to avoid bleed-through.
- [ ] Test with both selected and unselected states, and with utility classes like bg-primary, border, etc.
- [ ] Check for theme bleed-through by toggling themes and hovering all interactive elements.
- [ ] Use high specificity for theme selectors to prevent accidental global overrides.
- [ ] Use CSS variables for all theme colors and glows for consistency.

----------------------------------------------
TIPS FOR ROBUST THEMES
----------------------------------------------
- Always scope your theme using .theme-yourtheme selectors.
- Avoid transparency unless you want it. Use solid backgrounds for cards and buttons.
- When overriding Tailwind or utility classes, use !important or theme selectors.
- Use a border or box-shadow only for selected/active states if you want to avoid flex/outline jumps.
- Test your theme with all interactive states (hover, focus, selected, disabled).
- For glow, use box-shadow or filter: drop-shadow with your --glow-color or --glow variable.
- To extend glow to new elements, just add the selector and use your theme's --glow-color or --glow.

----------------------------------------------
EXAMPLE: Theme without Glow (copy and edit)
----------------------------------------------
.theme-mysoftpastel {
  --background: 320 60% 98%;
  --foreground: 320 40% 10%;
  --primary: 340 80% 60%;
  /* ...other variables... */
  /* No --glow-color, so glow utilities will not show! */
}

----------------------------------------------

/*
----------------------------------------------
ADVANCED THEMING PATTERNS (copy and adapt)
----------------------------------------------

// 1. Component-specific overrides
.theme-TEMPLATE_NAME .sidebar {
  background: hsl(var(--sidebar-background));
  color: hsl(var(--sidebar-foreground));
}
.theme-TEMPLATE_NAME .card, /* for Card component */
.theme-TEMPLATE_NAME .analysis-card {
  background: hsl(var(--card));
  color: hsl(var(--card-foreground));
  border-radius: var(--radius);
  box-shadow: 0 2px 8px 0 hsl(var(--muted) / 0.10);
  transition: background 0.2s, color 0.2s;
}
.theme-TEMPLATE_NAME .tooltip {
  background: hsl(var(--popover));
  color: hsl(var(--popover-foreground));
  border-radius: 0.375rem;
  box-shadow: 0 1px 6px 0 hsl(var(--muted) / 0.10);
}
.theme-TEMPLATE_NAME .modal {
  background: hsl(var(--background));
  color: hsl(var(--foreground));
  border-radius: 1rem;
}

// 2. Theme-aware animation variables and keyframes
.theme-TEMPLATE_NAME {
  --fade-in-duration: 0.4s;
  --glow-pulse-color: var(--glow-color, #fff);
}
@keyframes fade-in-card {
  from { opacity: 0; transform: scale(0.96); }
  to { opacity: 1; transform: scale(1); }
}
@keyframes glow-pulse {
  0% { box-shadow: 0 0 8px 2px var(--glow-pulse-color); }
  50% { box-shadow: 0 0 16px 8px var(--glow-pulse-color); }
  100% { box-shadow: 0 0 8px 2px var(--glow-pulse-color); }
}
.theme-TEMPLATE_NAME .card.animated {
  animation: fade-in-card var(--fade-in-duration) cubic-bezier(0.4,0,0.2,1);
}
.theme-TEMPLATE_NAME .glow-btn.pulse {
  animation: glow-pulse 1.2s infinite;
}

// 3. Utility class extension patterns
.theme-TEMPLATE_NAME .border-accent {
  border: 2px solid hsl(var(--accent));
}
.theme-TEMPLATE_NAME .focus-ring {
  outline: 2px solid hsl(var(--accent));
  outline-offset: 2px;
  transition: outline-color 0.2s;
}

// 4. Extending glow effects
/* To add glow to a new component, add the .glow-utility class and use --glow-color */
.theme-TEMPLATE_NAME .glow-analysis-card {
  box-shadow: 0 0 12px 4px var(--glow-color), 0 0 32px 8px var(--glow-color);
}

// 5. Example: Analysis page key cards
.theme-TEMPLATE_NAME .analysis-key-card {
  background: hsl(var(--card));
  color: hsl(var(--card-foreground));
  box-shadow: 0 2px 12px 0 hsl(var(--accent) / 0.15);
  border-left: 4px solid hsl(var(--accent));
  animation: fade-in-card 0.5s;
}

// 6. Example: Animated button
.theme-TEMPLATE_NAME .btn-animated {
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  transition: background 0.2s, color 0.2s;
}
.theme-TEMPLATE_NAME .btn-animated:active {
  animation: flash-blue 0.3s;
}
@keyframes flash-blue {
  0% { background-color: rgba(59, 130, 246, 0.2); }
  50% { background-color: rgba(59, 130, 246, 0.8); }
  100% { background-color: rgba(59, 130, 246, 0.2); }
}

----------------------------------------------
// Full variable list for reference:
.theme-TEMPLATE_NAME {
  --background: 0 0% 10%;
  --foreground: 0 0% 98%;
  --muted: 0 0% 20%;
  --muted-foreground: 0 0% 70%;
  --popover: 0 0% 15%;
  --popover-foreground: 0 0% 98%;
  --card: 0 0% 15%;
  --card-foreground: 0 0% 98%;
  --border: 0 0% 20%;
  --input: 0 0% 20%;
  --primary: 0 100% 50%;
  --primary-foreground: 0 0% 98%;
  --secondary: 240 100% 60%;
  --secondary-foreground: 0 0% 98%;
  --accent: 300 100% 60%;
  --accent-foreground: 0 0% 98%;
  --destructive: 0 100% 40%;
  --destructive-foreground: 0 0% 98%;
  --ring: 0 0% 80%;
  --radius: 0.5rem;
  --calendar-period-expected-bg: hsl(var(--card));
  --calendar-period-expected-fg: hsl(var(--card-foreground));
  --button-hover: 0 0% 90%;
  --button-selected: 0 0% 80%;
  --theme-text: 0 0% 98%;
  /* Chart colors */
  --chart-1: 0 100% 50%;
  --chart-2: 240 100% 60%;
  --chart-3: 300 100% 60%;
  --chart-4: 60 100% 60%;
  --chart-5: 120 100% 60%;
  /* Sidebar */
  --sidebar-background: 0 0% 10%;
  --sidebar-foreground: 0 0% 98%;
  --sidebar-primary: 0 100% 50%;
  --sidebar-primary-foreground: 0 0% 98%;
  --sidebar-accent: 300 100% 60%;
  --sidebar-accent-foreground: 0 0% 98%;
  --sidebar-border: 0 0% 20%;
  --sidebar-ring: 0 0% 80%;
  /* Optional: --glow-color for neon themes */
}

/* Robust disclaimer/period-expected box theming (copy for your theme): */
.theme-TEMPLATE_NAME .bg-period-expected,
.theme-TEMPLATE_NAME .bg-primary.bg-period-expected,
.theme-TEMPLATE_NAME .bg-period-expected.bg-primary,
.theme-TEMPLATE_NAME .bg-primary.bg-opacity-10.bg-period-expected,
.theme-TEMPLATE_NAME .bg-period-expected.bg-primary.bg-opacity-10 {
  background-color: hsl(var(--card)) !important;
  color: hsl(var(--card-foreground)) !important;
}

/* Glow utilities (optional, only if you want glow): */
.theme-TEMPLATE_NAME .glow-btn,
.theme-TEMPLATE_NAME .glow-switch {
  box-shadow: 0 0 8px 2px var(--glow-color), 0 0 16px 4px var(--glow-color);
}

/*
Troubleshooting & Notes:
- If you see transparency or wrong color, check for Tailwind utility class bleed (e.g. .bg-primary, .bg-primary.bg-opacity-10). Use the robust selector pattern above.
- Only add --glow-color and .glow-* utilities if your theme should have glow effects.
- Avoid transparency in card/disclaimer backgrounds unless it is a design choice.
- Always test your theme with various combinations of utility classes and in dark/light mode.

Checklist for new themes:
[ ] All variables above are set for your theme
[ ] Disclaimer/period-expected box is solid and readable
[ ] Glow works only if intended (with --glow-color)
[ ] No unwanted color bleed from Tailwind utilities
[ ] Sidebar/chart/accent colors are harmonious
*/

  --accent: 300 100% 60%;
  --accent-foreground: 0 0% 98%;
  --destructive: 0 100% 40%;
  --destructive-foreground: 0 0% 98%;
  --ring: 0 0% 80%;
  --radius: 0.5rem;
  --indigo-bar: #6366f1;
  /* Chart colors */
  --chart-1: 0 100% 50%;
  --chart-2: 240 100% 60%;
  --chart-3: 300 100% 60%;
  --chart-4: 60 100% 60%;
  --chart-5: 120 100% 60%;
  /* Sidebar colors */
  --sidebar-background: 0 0% 10%;
  --sidebar-foreground: 0 0% 98%;
  --sidebar-primary: 0 100% 50%;
  --sidebar-primary-foreground: 0 0% 98%;
  --sidebar-accent: 300 100% 60%;
  --sidebar-accent-foreground: 0 0% 98%;
  --sidebar-border: 0 0% 20%;
  --sidebar-ring: 0 0% 80%;
  /* Optional: --glow-color for neon themes */
}

/*
Instructions:
- For a new theme, copy the .theme-TEMPLATE_NAME block, rename it, and adjust variables.
- Add --glow-color and .glow-* utilities only if you want glow effects.
- See index.css for full utility class patterns.
*/
/*
Why You're Having Problems
Multiple Definitions: You have both early and late definitions of --cycle-stats-text for some themes (e.g., .theme-lunar appears twice, with different values).
CSS Cascade: The last definition in the file for a given selector wins. If you set --cycle-stats-text in .theme-lunar at line 65 and again at line 98, only the later one (line 98) actually applies, unless you use a more specific selector or !important.
Root Fallback: If a theme is missing --cycle-stats-text, it falls back to :root (which is var(--card-foreground) = a dark plum). If your theme background is light, this can look white or nearly white.
Hex vs HSL: You have some values as HSL and some as hex. If your component uses hsl(var(--cycle-stats-text)) but the variable is #b3c7f7, it won't work—CSS will ignore it and fall back to the next available value.
How to Clean Up and Fix Your Theme Variables
1. Only One Definition Per Theme
For each theme, only define --cycle-stats-text and --cycle-stats-bar once, in the main theme block.

2. Consistent Format
Always use HSL for variables that are injected with hsl(var(--cycle-stats-text)). If you want to use a hex color, convert it to HSL.

3. Remove Duplicates and Conflicts
Go through your file and:

Remove any duplicated theme blocks.
Remove any extra or conflicting --cycle-stats-text/--cycle-stats-bar lines for the same theme.
Make sure every theme you want to support has a single, correct definition.
Example: Cleaned Up Theme Block
```
.theme-lunar {
  --calendar-period-expected-bg: hsl(var(--card));
  --calendar-period-expected-fg: hsl(var(--card-foreground));
  --cycle-stats-text: 220 80% 85%; /* pastel blue in HSL */
  --cycle-stats-bar: var(--primary);
}
```